from typing import Any

class ADC:
    ATTN_0DB: int
    ATTN_11DB: int
    ATTN_2_5DB: int
    ATTN_6DB: int
    HALL: int
    WIDTH_10BIT: int
    WIDTH_11BIT: int
    WIDTH_12BIT: int
    WIDTH_9BIT: int
    def atten(self, *args) -> Any: ...
    def read(self, *args) -> Any: ...
    def readraw(self, *args) -> Any: ...
    def vref(self, *args) -> Any: ...
    def width(self, *args) -> Any: ...

class DAC:
    def write(self, *args) -> Any: ...

class DHT:
    DHT11: int
    DHT2X: int
    def read(self, *args) -> Any: ...
    def readinto(self, *args) -> Any: ...

EXT1_ALLLOW: int
EXT1_ANYHIGH: int
EXT1_ANYLOW: int

class I2C:
    CB_DATA: int
    CB_READ: int
    CB_WRITE: int
    MASTER: int
    READ: int
    SLAVE: int
    WRITE: int
    def address(self, *args) -> Any: ...
    def begin(self, *args) -> Any: ...
    def callback(self, *args) -> Any: ...
    def deinit(self, *args) -> Any: ...
    def end(self, *args) -> Any: ...
    def getdata(self, *args) -> Any: ...
    def init(self, *args) -> Any: ...
    def read_byte(self, *args) -> Any: ...
    def read_bytes(self, *args) -> Any: ...
    def readfrom(self, *args) -> Any: ...
    def readfrom_into(self, *args) -> Any: ...
    def readfrom_mem(self, *args) -> Any: ...
    def readfrom_mem_into(self, *args) -> Any: ...
    def scan(self, *args) -> Any: ...
    def setdata(self, *args) -> Any: ...
    def slavewrite(self, *args) -> Any: ...
    def start(self, *args) -> Any: ...
    def stop(self, *args) -> Any: ...
    def write_byte(self, *args) -> Any: ...
    def write_bytes(self, *args) -> Any: ...
    def writeto(self, *args) -> Any: ...
    def writeto_mem(self, *args) -> Any: ...

LOG_DEBUG: int
LOG_ERROR: int
LOG_INFO: int
LOG_NONE: int
LOG_VERBOSE: int
LOG_WARN: int

class Neopixel:
    BLACK: int
    BLUE: int
    CYAN: int
    GRAY: int
    GREEN: int
    def HSBtoRGB(self, *args) -> Any: ...
    def HSBtoRGBint(self, *args) -> Any: ...
    LIME: int
    MAGENTA: int
    MAROON: int
    NAVY: int
    OLIVE: int
    PURPLE: int
    RED: int
    def RGBtoHSB(self, *args) -> Any: ...
    SILVER: int
    TEAL: int
    TYPE_RGB: int
    TYPE_RGBW: int
    WHITE: int
    YELLOW: int
    def brightness(self, *args) -> Any: ...
    def clear(self, *args) -> Any: ...
    def color_order(self, *args) -> Any: ...
    def deinit(self, *args) -> Any: ...
    def get(self, *args) -> Any: ...
    def info(self, *args) -> Any: ...
    def rainbow(self, *args) -> Any: ...
    def set(self, *args) -> Any: ...
    def setHSB(self, *args) -> Any: ...
    def setHSBint(self, *args) -> Any: ...
    def setWhite(self, *args) -> Any: ...
    def show(self, *args) -> Any: ...
    def timings(self, *args) -> Any: ...

class Onewire:
    def crc8(self, *args) -> Any: ...
    def deinit(self, *args) -> Any: ...
    ds18x20: Any
    def readbyte(self, *args) -> Any: ...
    def readbytes(self, *args) -> Any: ...
    def reset(self, *args) -> Any: ...
    def rom_code(self, *args) -> Any: ...
    def scan(self, *args) -> Any: ...
    def search(self, *args) -> Any: ...
    def writebyte(self, *args) -> Any: ...
    def writebytes(self, *args) -> Any: ...

class PWM:
    def deinit(self, *args) -> Any: ...
    def duty(self, *args) -> Any: ...
    def freq(self, *args) -> Any: ...
    def init(self, *args) -> Any: ...
    def list(self, *args) -> Any: ...
    def pause(self, *args) -> Any: ...
    def resume(self, *args) -> Any: ...

class Pin:
    IN: int
    INOUT: int
    INOUT_OD: int
    IRQ_ANYEDGE: int
    IRQ_FALLING: int
    IRQ_HILEVEL: int
    IRQ_LOLEVEL: int
    IRQ_RISING: int
    OUT: int
    OUT_OD: int
    PULL_DOWN: int
    PULL_FLOAT: int
    PULL_UP: int
    PULL_UPDOWN: int
    def init(self, *args) -> Any: ...
    def irq(self, *args) -> Any: ...
    def value(self, *args) -> Any: ...

class RTC:
    EXT1_ALLHIGH: int
    EXT1_ALLLOW: int
    EXT1_ANYHIGH: int
    def clear(self, *args) -> Any: ...
    def init(self, *args) -> Any: ...
    def now(self, *args) -> Any: ...
    def ntp_state(self, *args) -> Any: ...
    def ntp_sync(self, *args) -> Any: ...
    def read(self, *args) -> Any: ...
    def read_string(self, *args) -> Any: ...
    def synced(self, *args) -> Any: ...
    def wake_on_ext0(self, *args) -> Any: ...
    def wake_on_ext1(self, *args) -> Any: ...
    def write(self, *args) -> Any: ...
    def write_string(self, *args) -> Any: ...

class SPI:
    HSPI: int
    LSB: int
    MSB: int
    VSPI: int
    def deinit(self, *args) -> Any: ...
    def deselect(self, *args) -> Any: ...
    def init(self, *args) -> Any: ...
    def read(self, *args) -> Any: ...
    def readfrom_mem(self, *args) -> Any: ...
    def readinto(self, *args) -> Any: ...
    def select(self, *args) -> Any: ...
    def write(self, *args) -> Any: ...
    def write_readinto(self, *args) -> Any: ...

class Signal:
    def off(self, *args) -> Any: ...
    def on(self, *args) -> Any: ...
    def value(self, *args) -> Any: ...

class Timer:
    CHRONO: int
    EXTBASE: int
    EXTENDED: int
    ONE_SHOT: int
    PERIODIC: int
    def callback(self, *args) -> Any: ...
    def deinit(self, *args) -> Any: ...
    def events(self, *args) -> Any: ...
    def init(self, *args) -> Any: ...
    def isrunning(self, *args) -> Any: ...
    def pause(self, *args) -> Any: ...
    def period(self, *args) -> Any: ...
    def reshot(self, *args) -> Any: ...
    def resume(self, *args) -> Any: ...
    def start(self, *args) -> Any: ...
    def stop(self, *args) -> Any: ...
    def timernum(self, *args) -> Any: ...
    def value(self, *args) -> Any: ...

class TouchPad:
    def config(self, *args) -> Any: ...
    def read(self, *args) -> Any: ...

class UART:
    CBTYPE_DATA: int
    CBTYPE_ERROR: int
    CBTYPE_PATTERN: int
    def any(self, *args) -> Any: ...
    def callback(self, *args) -> Any: ...
    def flush(self, *args) -> Any: ...
    def init(self, *args) -> Any: ...
    def read(self, *args) -> Any: ...
    def readinto(self, *args) -> Any: ...
    def readline(self, *args) -> Any: ...
    def readln(self, *args) -> Any: ...
    def write(self, *args) -> Any: ...

def deepsleep(*args) -> Any: ...
def disable_irq(*args) -> Any: ...
def enable_irq(*args) -> Any: ...
def freq(*args) -> Any: ...
def heap_info(*args) -> Any: ...
def idle(*args) -> Any: ...
def internal_temp(*args) -> Any: ...
def loglevel(*args) -> Any: ...

mem16: Any
mem32: Any
mem8: Any

def nvs_erase(*args) -> Any: ...
def nvs_erase_all(*args) -> Any: ...
def nvs_getint(*args) -> Any: ...
def nvs_getstr(*args) -> Any: ...
def nvs_setint(*args) -> Any: ...
def nvs_setstr(*args) -> Any: ...
def random(*args) -> Any: ...
def redirectlog(*args) -> Any: ...
def reset(*args) -> Any: ...
def restorelog(*args) -> Any: ...
def stdin_disable(*args) -> Any: ...
def stdin_get(*args) -> Any: ...
def stdout_put(*args) -> Any: ...
def time_pulse_us(*args) -> Any: ...
def unique_id(*args) -> Any: ...
def wake_description(*args) -> Any: ...
def wake_reason(*args) -> Any: ...
