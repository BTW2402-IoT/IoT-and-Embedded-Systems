from typing import Any

class CancelledError(Exception): ...

DEBUG: int

class EventLoop:
    def call_at_(self, *argv) -> Any: ...
    def call_later(self, *argv) -> Any: ...
    def call_later_ms(self, *argv) -> Any: ...
    def call_soon(self, *argv) -> Any: ...
    def close(self, *argv) -> Any: ...
    def create_task(self, *argv) -> Any: ...
    def run_forever(self, *argv) -> Any: ...
    def run_until_complete(self, *argv) -> Any: ...
    def stop(self, *argv) -> Any: ...
    def time(self, *argv) -> Any: ...
    def wait(self, *argv) -> Any: ...

class IORead:
    def handle(self, *argv) -> Any: ...

class IOReadDone:
    def handle(self, *argv) -> Any: ...

class IOWrite:
    def handle(self, *argv) -> Any: ...

class IOWriteDone:
    def handle(self, *argv) -> Any: ...

class SleepMs:
    def handle(self, *argv) -> Any: ...

class StopLoop:
    def handle(self, *argv) -> Any: ...

class SysCall:
    def handle(self, *argv) -> Any: ...

class SysCall1:
    def handle(self, *argv) -> Any: ...

def Task() -> None: ...

class TimeoutError(Exception): ...
class TimeoutObj: ...

_event_loop: Any

class _event_loop_class:
    def add_reader(self, *argv) -> Any: ...
    def add_writer(self, *argv) -> Any: ...
    def call_at_(self, *argv) -> Any: ...
    def call_later(self, *argv) -> Any: ...
    def call_later_ms(self, *argv) -> Any: ...
    def call_soon(self, *argv) -> Any: ...
    def close(self, *argv) -> Any: ...
    def create_task(self, *argv) -> Any: ...
    def remove_reader(self, *argv) -> Any: ...
    def remove_writer(self, *argv) -> Any: ...
    def run_forever(self, *argv) -> Any: ...
    def run_until_complete(self, *argv) -> Any: ...
    def stop(self, *argv) -> Any: ...
    def time(self, *argv) -> Any: ...
    def wait(self, *argv) -> Any: ...

_stop_iter: Any

def cancel() -> None: ...
def coroutine() -> None: ...
def ensure_future() -> None: ...
def get_event_loop() -> None: ...

log: Any

def set_debug() -> None: ...

sleep: Any
sleep_ms: Any
time: Any

class type_gen:
    def close(self, *argv) -> Any: ...
    def pend_throw(self, *argv) -> Any: ...
    def send(self, *argv) -> Any: ...
    def throw(self, *argv) -> Any: ...

ucollections: Any
utimeq: Any

def wait_for() -> None: ...

wait_for_ms: Any
