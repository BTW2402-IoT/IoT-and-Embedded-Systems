from typing import Any

class ArithmeticError(Exception): ...
class AssertionError(Exception): ...
class AttributeError(Exception): ...
class EOFError(Exception): ...

Ellipsis: Any

class Exception: ...
class GeneratorExit: ...
class ImportError(Exception): ...
class IndentationError(Exception): ...
class IndexError(Exception): ...
class KeyError(Exception): ...
class KeyboardInterrupt: ...
class LookupError(Exception): ...
class MemoryError(Exception): ...
class NameError(Exception): ...

NotImplemented: Any

class NotImplementedError(Exception): ...
class OSError(Exception): ...
class OverflowError(Exception): ...
class RuntimeError(Exception): ...
class StopAsyncIteration: ...
class StopIteration: ...
class SyntaxError(Exception): ...
class SystemExit: ...
class TypeError(Exception): ...
class UnicodeError(Exception): ...
class ValueError(Exception): ...
class ZeroDivisionError(Exception): ...

def abs() -> None: ...
def all() -> None: ...
def any() -> None: ...
def bin() -> None: ...

class bool: ...

class bytearray:
    def append(self, *argv) -> Any: ...
    def decode(self, *argv) -> Any: ...
    def extend(self, *argv) -> Any: ...

class bytes:
    def center(self, *argv) -> Any: ...
    def count(self, *argv) -> Any: ...
    def decode(self, *argv) -> Any: ...
    def endswith(self, *argv) -> Any: ...
    def find(self, *argv) -> Any: ...
    def format(self, *argv) -> Any: ...
    def index(self, *argv) -> Any: ...
    def isalpha(self, *argv) -> Any: ...
    def isdigit(self, *argv) -> Any: ...
    def islower(self, *argv) -> Any: ...
    def isspace(self, *argv) -> Any: ...
    def isupper(self, *argv) -> Any: ...
    def join(self, *argv) -> Any: ...
    def lower(self, *argv) -> Any: ...
    def lstrip(self, *argv) -> Any: ...
    def partition(self, *argv) -> Any: ...
    def replace(self, *argv) -> Any: ...
    def rfind(self, *argv) -> Any: ...
    def rindex(self, *argv) -> Any: ...
    def rpartition(self, *argv) -> Any: ...
    def rsplit(self, *argv) -> Any: ...
    def rstrip(self, *argv) -> Any: ...
    def split(self, *argv) -> Any: ...
    def splitlines(self, *argv) -> Any: ...
    def startswith(self, *argv) -> Any: ...
    def strip(self, *argv) -> Any: ...
    def upper(self, *argv) -> Any: ...

def callable() -> None: ...
def chr() -> None: ...

class classmethod: ...

def compile() -> None: ...

class complex: ...

def delattr() -> None: ...

class dict:
    def clear(self, *argv) -> Any: ...
    def copy(self, *argv) -> Any: ...
    def fromkeys(self, *argv) -> Any: ...
    def get(self, *argv) -> Any: ...
    def items(self, *argv) -> Any: ...
    def keys(self, *argv) -> Any: ...
    def pop(self, *argv) -> Any: ...
    def popitem(self, *argv) -> Any: ...
    def setdefault(self, *argv) -> Any: ...
    def update(self, *argv) -> Any: ...
    def values(self, *argv) -> Any: ...

def dir() -> None: ...
def divmod() -> None: ...

class enumerate: ...

def eval() -> None: ...
def exec() -> None: ...
def execfile() -> None: ...

class filter: ...
class float: ...

class frozenset:
    def copy(self, *argv) -> Any: ...
    def difference(self, *argv) -> Any: ...
    def intersection(self, *argv) -> Any: ...
    def isdisjoint(self, *argv) -> Any: ...
    def issubset(self, *argv) -> Any: ...
    def issuperset(self, *argv) -> Any: ...
    def symmetric_difference(self, *argv) -> Any: ...
    def union(self, *argv) -> Any: ...

def getattr() -> None: ...
def globals() -> None: ...
def hasattr() -> None: ...
def hash() -> None: ...
def help() -> None: ...
def hex() -> None: ...
def id() -> None: ...
def input() -> None: ...

class int:
    def from_bytes(self, *argv) -> Any: ...
    def to_bytes(self, *argv) -> Any: ...

def isinstance() -> None: ...
def issubclass() -> None: ...
def iter() -> None: ...
def len() -> None: ...

class list:
    def append(self, *argv) -> Any: ...
    def clear(self, *argv) -> Any: ...
    def copy(self, *argv) -> Any: ...
    def count(self, *argv) -> Any: ...
    def extend(self, *argv) -> Any: ...
    def index(self, *argv) -> Any: ...
    def insert(self, *argv) -> Any: ...
    def pop(self, *argv) -> Any: ...
    def remove(self, *argv) -> Any: ...
    def reverse(self, *argv) -> Any: ...
    def sort(self, *argv) -> Any: ...

def locals() -> None: ...

class map: ...

def max() -> None: ...

class memoryview: ...

def min() -> None: ...
def next() -> None: ...

class object: ...

def oct() -> None: ...
def open() -> None: ...
def ord() -> None: ...
def pow() -> None: ...
def print() -> None: ...

class property:
    def deleter(self, *argv) -> Any: ...
    def getter(self, *argv) -> Any: ...
    def setter(self, *argv) -> Any: ...

class range: ...

def repr() -> None: ...

class reversed: ...

def round() -> None: ...

class set:
    def add(self, *argv) -> Any: ...
    def clear(self, *argv) -> Any: ...
    def copy(self, *argv) -> Any: ...
    def difference(self, *argv) -> Any: ...
    def difference_update(self, *argv) -> Any: ...
    def discard(self, *argv) -> Any: ...
    def intersection(self, *argv) -> Any: ...
    def intersection_update(self, *argv) -> Any: ...
    def isdisjoint(self, *argv) -> Any: ...
    def issubset(self, *argv) -> Any: ...
    def issuperset(self, *argv) -> Any: ...
    def pop(self, *argv) -> Any: ...
    def remove(self, *argv) -> Any: ...
    def symmetric_difference(self, *argv) -> Any: ...
    def symmetric_difference_update(self, *argv) -> Any: ...
    def union(self, *argv) -> Any: ...
    def update(self, *argv) -> Any: ...

def setattr() -> None: ...

class slice: ...

def sorted() -> None: ...

class staticmethod: ...

class str:
    def center(self, *argv) -> Any: ...
    def count(self, *argv) -> Any: ...
    def encode(self, *argv) -> Any: ...
    def endswith(self, *argv) -> Any: ...
    def find(self, *argv) -> Any: ...
    def format(self, *argv) -> Any: ...
    def index(self, *argv) -> Any: ...
    def isalpha(self, *argv) -> Any: ...
    def isdigit(self, *argv) -> Any: ...
    def islower(self, *argv) -> Any: ...
    def isspace(self, *argv) -> Any: ...
    def isupper(self, *argv) -> Any: ...
    def join(self, *argv) -> Any: ...
    def lower(self, *argv) -> Any: ...
    def lstrip(self, *argv) -> Any: ...
    def partition(self, *argv) -> Any: ...
    def replace(self, *argv) -> Any: ...
    def rfind(self, *argv) -> Any: ...
    def rindex(self, *argv) -> Any: ...
    def rpartition(self, *argv) -> Any: ...
    def rsplit(self, *argv) -> Any: ...
    def rstrip(self, *argv) -> Any: ...
    def split(self, *argv) -> Any: ...
    def splitlines(self, *argv) -> Any: ...
    def startswith(self, *argv) -> Any: ...
    def strip(self, *argv) -> Any: ...
    def upper(self, *argv) -> Any: ...

def sum() -> None: ...

class super: ...

class tuple:
    def count(self, *argv) -> Any: ...
    def index(self, *argv) -> Any: ...

class type: ...
class zip: ...
