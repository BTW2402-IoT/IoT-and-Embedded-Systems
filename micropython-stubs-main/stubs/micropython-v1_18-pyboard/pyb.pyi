from typing import Any

def main(*args) -> Any: ...
def stop(*args) -> Any: ...

SD: Any

class DAC:
    def __init__(self, *argv) -> None: ...
    def write(self, *args) -> Any: ...
    CIRCULAR: int
    NORMAL: int
    def deinit(self, *args) -> Any: ...
    def init(self, *args) -> Any: ...
    def noise(self, *args) -> Any: ...
    def triangle(self, *args) -> Any: ...
    def write_timed(self, *args) -> Any: ...

class RTC:
    def __init__(self, *argv) -> None: ...
    def calibration(self, *args) -> Any: ...
    def datetime(self, *args) -> Any: ...
    def info(self, *args) -> Any: ...
    def init(self, *args) -> Any: ...
    def wakeup(self, *args) -> Any: ...

class ADC:
    def __init__(self, *argv) -> None: ...
    def read(self, *args) -> Any: ...
    def read_timed(self, *args) -> Any: ...
    def read_timed_multi(self, *args) -> Any: ...

class ADCAll:
    def __init__(self, *argv) -> None: ...
    def read_channel(self, *args) -> Any: ...
    def read_core_temp(self, *args) -> Any: ...
    def read_core_vbat(self, *args) -> Any: ...
    def read_core_vref(self, *args) -> Any: ...
    def read_vref(self, *args) -> Any: ...

class Accel:
    def __init__(self, *argv) -> None: ...
    def read(self, *args) -> Any: ...
    def write(self, *args) -> Any: ...
    def filtered_xyz(self, *args) -> Any: ...
    def tilt(self, *args) -> Any: ...
    def x(self, *args) -> Any: ...
    def y(self, *args) -> Any: ...
    def z(self, *args) -> Any: ...

class CAN:
    def __init__(self, *argv) -> None: ...
    def any(self, *args) -> Any: ...
    def send(self, *args) -> Any: ...
    BUS_OFF: int
    ERROR_ACTIVE: int
    ERROR_PASSIVE: int
    ERROR_WARNING: int
    LIST16: int
    LIST32: int
    LOOPBACK: int
    MASK16: int
    MASK32: int
    NORMAL: int
    SILENT: int
    SILENT_LOOPBACK: int
    STOPPED: int
    def clearfilter(self, *args) -> Any: ...
    def deinit(self, *args) -> Any: ...
    def info(self, *args) -> Any: ...
    def init(self, *args) -> Any: ...
    @classmethod
    def initfilterbanks(cls, *args) -> Any: ...
    def recv(self, *args) -> Any: ...
    def restart(self, *args) -> Any: ...
    def rxcallback(self, *args) -> Any: ...
    def setfilter(self, *args) -> Any: ...
    def state(self, *args) -> Any: ...

class ExtInt:
    def __init__(self, *argv) -> None: ...
    EVT_FALLING: int
    EVT_RISING: int
    EVT_RISING_FALLING: int
    IRQ_FALLING: int
    IRQ_RISING: int
    IRQ_RISING_FALLING: int
    def disable(self, *args) -> Any: ...
    def enable(self, *args) -> Any: ...
    def line(self, *args) -> Any: ...
    def regs(self, *args) -> Any: ...
    def swint(self, *args) -> Any: ...

class Flash:
    def __init__(self, *argv) -> None: ...
    def ioctl(self, *args) -> Any: ...
    def readblocks(self, *args) -> Any: ...
    def writeblocks(self, *args) -> Any: ...

class I2C:
    def __init__(self, *argv) -> None: ...
    def send(self, *args) -> Any: ...
    CONTROLLER: int
    MASTER: int
    PERIPHERAL: int
    SLAVE: int
    def deinit(self, *args) -> Any: ...
    def init(self, *args) -> Any: ...
    def is_ready(self, *args) -> Any: ...
    def mem_read(self, *args) -> Any: ...
    def mem_write(self, *args) -> Any: ...
    def recv(self, *args) -> Any: ...
    def scan(self, *args) -> Any: ...

class LCD:
    def __init__(self, *argv) -> None: ...
    def get(self, *args) -> Any: ...
    def write(self, *args) -> Any: ...
    def command(self, *args) -> Any: ...
    def contrast(self, *args) -> Any: ...
    def fill(self, *args) -> Any: ...
    def light(self, *args) -> Any: ...
    def pixel(self, *args) -> Any: ...
    def show(self, *args) -> Any: ...
    def text(self, *args) -> Any: ...

class LED:
    def __init__(self, *argv) -> None: ...
    def intensity(self, *args) -> Any: ...
    def off(self, *args) -> Any: ...
    def on(self, *args) -> Any: ...
    def toggle(self, *args) -> Any: ...

class Pin:
    def __init__(self, *argv) -> None: ...
    @classmethod
    def dict(cls, *args) -> Any: ...
    def value(self, *args) -> Any: ...
    AF1_TIM1: int
    AF1_TIM2: int
    AF2_TIM3: int
    AF2_TIM4: int
    AF2_TIM5: int
    AF3_TIM10: int
    AF3_TIM11: int
    AF3_TIM8: int
    AF3_TIM9: int
    AF4_I2C1: int
    AF4_I2C2: int
    AF5_I2S2: int
    AF5_SPI1: int
    AF5_SPI2: int
    AF6_I2S2: int
    AF7_USART1: int
    AF7_USART2: int
    AF7_USART3: int
    AF8_UART4: int
    AF8_USART6: int
    AF9_CAN1: int
    AF9_CAN2: int
    AF9_TIM12: int
    AF9_TIM13: int
    AF9_TIM14: int
    AF_OD: int
    AF_PP: int
    ALT: int
    ALT_OPEN_DRAIN: int
    ANALOG: int
    IN: int
    IRQ_FALLING: int
    IRQ_RISING: int
    OPEN_DRAIN: int
    OUT: int
    OUT_OD: int
    OUT_PP: int
    PULL_DOWN: int
    PULL_NONE: int
    PULL_UP: int
    def af(self, *args) -> Any: ...
    def af_list(self, *args) -> Any: ...
    class board:
        def __init__(self, *argv) -> None: ...
        LED_BLUE: Any
        LED_GREEN: Any
        LED_RED: Any
        LED_YELLOW: Any
        MMA_AVDD: Any
        MMA_INT: Any
        SD: Any
        SD_CK: Any
        SD_CMD: Any
        SD_D0: Any
        SD_D1: Any
        SD_D2: Any
        SD_D3: Any
        SD_SW: Any
        SW: Any
        USB_DM: Any
        USB_DP: Any
        USB_ID: Any
        USB_VBUS: Any
        X1: Any
        X10: Any
        X11: Any
        X12: Any
        X17: Any
        X18: Any
        X19: Any
        X2: Any
        X20: Any
        X21: Any
        X22: Any
        X3: Any
        X4: Any
        X5: Any
        X6: Any
        X7: Any
        X8: Any
        X9: Any
        Y1: Any
        Y10: Any
        Y11: Any
        Y12: Any
        Y2: Any
        Y3: Any
        Y4: Any
        Y5: Any
        Y6: Any
        Y7: Any
        Y8: Any
        Y9: Any
    class cpu:
        def __init__(self, *argv) -> None: ...
        A0: Any
        A1: Any
        A10: Any
        A11: Any
        A12: Any
        A13: Any
        A14: Any
        A15: Any
        A2: Any
        A3: Any
        A4: Any
        A5: Any
        A6: Any
        A7: Any
        A8: Any
        A9: Any
        B0: Any
        B1: Any
        B10: Any
        B11: Any
        B12: Any
        B13: Any
        B14: Any
        B15: Any
        B2: Any
        B3: Any
        B4: Any
        B5: Any
        B6: Any
        B7: Any
        B8: Any
        B9: Any
        C0: Any
        C1: Any
        C10: Any
        C11: Any
        C12: Any
        C13: Any
        C2: Any
        C3: Any
        C4: Any
        C5: Any
        C6: Any
        C7: Any
        C8: Any
        C9: Any
        D2: Any
    @classmethod
    def debug(cls, *args) -> Any: ...
    def gpio(self, *args) -> Any: ...
    def high(self, *args) -> Any: ...
    def init(self, *args) -> Any: ...
    def irq(self, *args) -> Any: ...
    def low(self, *args) -> Any: ...
    @classmethod
    def mapper(cls, *args) -> Any: ...
    def mode(self, *args) -> Any: ...
    def name(self, *args) -> Any: ...
    def names(self, *args) -> Any: ...
    def off(self, *args) -> Any: ...
    def on(self, *args) -> Any: ...
    def pin(self, *args) -> Any: ...
    def port(self, *args) -> Any: ...
    def pull(self, *args) -> Any: ...

class SDCard:
    def __init__(self, *argv) -> None: ...
    def read(self, *args) -> Any: ...
    def write(self, *args) -> Any: ...
    def info(self, *args) -> Any: ...
    def ioctl(self, *args) -> Any: ...
    def power(self, *args) -> Any: ...
    def present(self, *args) -> Any: ...
    def readblocks(self, *args) -> Any: ...
    def writeblocks(self, *args) -> Any: ...

class SPI:
    def __init__(self, *argv) -> None: ...
    def read(self, *args) -> Any: ...
    def readinto(self, *args) -> Any: ...
    def send(self, *args) -> Any: ...
    def write(self, *args) -> Any: ...
    CONTROLLER: int
    LSB: int
    MASTER: int
    MSB: int
    PERIPHERAL: int
    SLAVE: int
    def deinit(self, *args) -> Any: ...
    def init(self, *args) -> Any: ...
    def recv(self, *args) -> Any: ...
    def send_recv(self, *args) -> Any: ...
    def write_readinto(self, *args) -> Any: ...

class Servo:
    def __init__(self, *argv) -> None: ...
    def angle(self, *args) -> Any: ...
    def calibration(self, *args) -> Any: ...
    def pulse_width(self, *args) -> Any: ...
    def speed(self, *args) -> Any: ...

class Switch:
    def __init__(self, *argv) -> None: ...
    def value(self, *args) -> Any: ...
    def callback(self, *args) -> Any: ...

class Timer:
    def __init__(self, *argv) -> None: ...
    BOTH: int
    BRK_HIGH: int
    BRK_LOW: int
    BRK_OFF: int
    CENTER: int
    DOWN: int
    ENC_A: int
    ENC_AB: int
    ENC_B: int
    FALLING: int
    HIGH: int
    IC: int
    LOW: int
    OC_ACTIVE: int
    OC_FORCED_ACTIVE: int
    OC_FORCED_INACTIVE: int
    OC_INACTIVE: int
    OC_TIMING: int
    OC_TOGGLE: int
    PWM: int
    PWM_INVERTED: int
    RISING: int
    UP: int
    def callback(self, *args) -> Any: ...
    def channel(self, *args) -> Any: ...
    def counter(self, *args) -> Any: ...
    def deinit(self, *args) -> Any: ...
    def freq(self, *args) -> Any: ...
    def init(self, *args) -> Any: ...
    def period(self, *args) -> Any: ...
    def prescaler(self, *args) -> Any: ...
    def source_freq(self, *args) -> Any: ...

class UART:
    def __init__(self, *argv) -> None: ...
    def any(self, *args) -> Any: ...
    def read(self, *args) -> Any: ...
    def readinto(self, *args) -> Any: ...
    def readline(self, *args) -> Any: ...
    def write(self, *args) -> Any: ...
    CTS: int
    IRQ_RXIDLE: int
    RTS: int
    def deinit(self, *args) -> Any: ...
    def init(self, *args) -> Any: ...
    def irq(self, *args) -> Any: ...
    def readchar(self, *args) -> Any: ...
    def sendbreak(self, *args) -> Any: ...
    def writechar(self, *args) -> Any: ...

class USB_HID:
    def __init__(self, *argv) -> None: ...
    def send(self, *args) -> Any: ...
    def recv(self, *args) -> Any: ...

class USB_VCP:
    def __init__(self, *argv) -> None: ...
    def any(self, *args) -> Any: ...
    def close(self, *args) -> Any: ...
    def read(self, *args) -> Any: ...
    def readinto(self, *args) -> Any: ...
    def readline(self, *args) -> Any: ...
    def send(self, *args) -> Any: ...
    def write(self, *args) -> Any: ...
    CTS: int
    IRQ_RX: int
    RTS: int
    def init(self, *args) -> Any: ...
    def irq(self, *args) -> Any: ...
    def isconnected(self, *args) -> Any: ...
    def readlines(self, *args) -> Any: ...
    def recv(self, *args) -> Any: ...
    def setinterrupt(self, *args) -> Any: ...

def bootloader(*args) -> Any: ...
def country(*args) -> Any: ...
def delay(*args) -> Any: ...
def dht_readinto(*args) -> Any: ...
def disable_irq(*args) -> Any: ...
def elapsed_micros(*args) -> Any: ...
def elapsed_millis(*args) -> Any: ...
def enable_irq(*args) -> Any: ...
def fault_debug(*args) -> Any: ...
def freq(*args) -> Any: ...
def hard_reset(*args) -> Any: ...
def have_cdc(*args) -> Any: ...
def hid(*args) -> Any: ...

hid_keyboard: tuple
hid_mouse: tuple

def info(*args) -> Any: ...
def micros(*args) -> Any: ...
def millis(*args) -> Any: ...
def mount(*args) -> Any: ...
def pwm(*args) -> Any: ...
def repl_info(*args) -> Any: ...
def repl_uart(*args) -> Any: ...
def rng(*args) -> Any: ...
def servo(*args) -> Any: ...
def standby(*args) -> Any: ...
def sync(*args) -> Any: ...
def udelay(*args) -> Any: ...
def unique_id(*args) -> Any: ...
def usb_mode(*args) -> Any: ...
def wfi(*args) -> Any: ...
