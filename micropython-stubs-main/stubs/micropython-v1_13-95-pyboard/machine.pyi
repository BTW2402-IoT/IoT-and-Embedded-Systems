from typing import Any

class ADC:
    CORE_TEMP: int
    CORE_VBAT: int
    CORE_VREF: int
    VREF: int
    def read_u16(self, *args) -> Any: ...

DEEPSLEEP_RESET: int
HARD_RESET: int

class I2C:
    def init(self, *args) -> Any: ...
    def readfrom(self, *args) -> Any: ...
    def readfrom_into(self, *args) -> Any: ...
    def readfrom_mem(self, *args) -> Any: ...
    def readfrom_mem_into(self, *args) -> Any: ...
    def readinto(self, *args) -> Any: ...
    def scan(self, *args) -> Any: ...
    def start(self, *args) -> Any: ...
    def stop(self, *args) -> Any: ...
    def write(self, *args) -> Any: ...
    def writeto(self, *args) -> Any: ...
    def writeto_mem(self, *args) -> Any: ...
    def writevto(self, *args) -> Any: ...

PWRON_RESET: int

class Pin:
    AF1_TIM1: int
    AF1_TIM2: int
    AF2_TIM3: int
    AF2_TIM4: int
    AF2_TIM5: int
    AF3_TIM10: int
    AF3_TIM11: int
    AF3_TIM8: int
    AF3_TIM9: int
    AF4_I2C1: int
    AF4_I2C2: int
    AF5_SPI1: int
    AF5_SPI2: int
    AF7_USART1: int
    AF7_USART2: int
    AF7_USART3: int
    AF8_UART4: int
    AF8_USART6: int
    AF9_CAN1: int
    AF9_CAN2: int
    AF9_TIM12: int
    AF9_TIM13: int
    AF9_TIM14: int
    AF_OD: int
    AF_PP: int
    ALT: int
    ALT_OPEN_DRAIN: int
    ANALOG: int
    IN: int
    IRQ_FALLING: int
    IRQ_RISING: int
    OPEN_DRAIN: int
    OUT: int
    OUT_OD: int
    OUT_PP: int
    PULL_DOWN: int
    PULL_NONE: int
    PULL_UP: int
    def af(self, *args) -> Any: ...
    def af_list(self, *args) -> Any: ...
    board: Any
    cpu: Any
    def debug(self, *args) -> Any: ...
    def dict(self, *args) -> Any: ...
    def gpio(self, *args) -> Any: ...
    def high(self, *args) -> Any: ...
    def init(self, *args) -> Any: ...
    def irq(self, *args) -> Any: ...
    def low(self, *args) -> Any: ...
    def mapper(self, *args) -> Any: ...
    def mode(self, *args) -> Any: ...
    def name(self, *args) -> Any: ...
    def names(self, *args) -> Any: ...
    def off(self, *args) -> Any: ...
    def on(self, *args) -> Any: ...
    def pin(self, *args) -> Any: ...
    def port(self, *args) -> Any: ...
    def pull(self, *args) -> Any: ...
    def value(self, *args) -> Any: ...

class RTC:
    def calibration(self, *args) -> Any: ...
    def datetime(self, *args) -> Any: ...
    def info(self, *args) -> Any: ...
    def init(self, *args) -> Any: ...
    def wakeup(self, *args) -> Any: ...

SOFT_RESET: int

class SPI:
    LSB: int
    MSB: int
    def deinit(self, *args) -> Any: ...
    def init(self, *args) -> Any: ...
    def read(self, *args) -> Any: ...
    def readinto(self, *args) -> Any: ...
    def write(self, *args) -> Any: ...
    def write_readinto(self, *args) -> Any: ...

class Signal:
    def off(self, *args) -> Any: ...
    def on(self, *args) -> Any: ...
    def value(self, *args) -> Any: ...

class SoftI2C:
    def init(self, *args) -> Any: ...
    def readfrom(self, *args) -> Any: ...
    def readfrom_into(self, *args) -> Any: ...
    def readfrom_mem(self, *args) -> Any: ...
    def readfrom_mem_into(self, *args) -> Any: ...
    def readinto(self, *args) -> Any: ...
    def scan(self, *args) -> Any: ...
    def start(self, *args) -> Any: ...
    def stop(self, *args) -> Any: ...
    def write(self, *args) -> Any: ...
    def writeto(self, *args) -> Any: ...
    def writeto_mem(self, *args) -> Any: ...
    def writevto(self, *args) -> Any: ...

class SoftSPI:
    LSB: int
    MSB: int
    def deinit(self, *args) -> Any: ...
    def init(self, *args) -> Any: ...
    def read(self, *args) -> Any: ...
    def readinto(self, *args) -> Any: ...
    def write(self, *args) -> Any: ...
    def write_readinto(self, *args) -> Any: ...

class Timer:
    ONE_SHOT: int
    PERIODIC: int
    def deinit(self, *args) -> Any: ...
    def init(self, *args) -> Any: ...

class UART:
    CTS: int
    IRQ_RXIDLE: int
    RTS: int
    def any(self, *args) -> Any: ...
    def deinit(self, *args) -> Any: ...
    def init(self, *args) -> Any: ...
    def irq(self, *args) -> Any: ...
    def read(self, *args) -> Any: ...
    def readchar(self, *args) -> Any: ...
    def readinto(self, *args) -> Any: ...
    def readline(self, *args) -> Any: ...
    def sendbreak(self, *args) -> Any: ...
    def write(self, *args) -> Any: ...
    def writechar(self, *args) -> Any: ...

class WDT:
    def feed(self, *args) -> Any: ...

WDT_RESET: int

def bootloader(*args) -> Any: ...
def deepsleep(*args) -> Any: ...
def disable_irq(*args) -> Any: ...
def enable_irq(*args) -> Any: ...
def freq(*args) -> Any: ...
def idle(*args) -> Any: ...
def info(*args) -> Any: ...
def lightsleep(*args) -> Any: ...

mem16: Any
mem32: Any
mem8: Any

def reset(*args) -> Any: ...
def reset_cause(*args) -> Any: ...
def rng(*args) -> Any: ...
def sleep(*args) -> Any: ...
def soft_reset(*args) -> Any: ...
def time_pulse_us(*args) -> Any: ...
def unique_id(*args) -> Any: ...
